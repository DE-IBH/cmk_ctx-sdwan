#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# cmk_ctx-sdwan - check-mk plugin for SNMP-based Cisco Digital-Optical-Monitoring monitoring
#
# Authors:
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2019 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

CTX_SDWAN_VPATH_IDX = 0
CTX_SDWAN_VPATH_NAME = 1
CTX_SDWAN_VPATH_STATE = 2

ctx_sdwan_vpath_states = {
	"0": [0, 'undefined'],
	"1": [2, 'disabled'],
	"2": [2, 'dead'],
	"3": [2, 'bad'],
	"4": [0, 'good'],
}

ctx_sdwan_vpath_perf = {
	  'tx bps'     : [ 3,  1,  True],
	  'tx pps'     : [ 4,  1,  True],
	  'rx bps'     : [ 5,  1,  True],
	  'rx pps'     : [ 6,  1,  True],
	  'paths'      : [ 7,  1, False],
	  'rules'      : [ 8,  1, False],
	  'tx bps drop': [ 9,  1,  True],
	  'tx pps drop': [10,  1,  True],
	  'tx pps lost': [11,  1,  True],
	  'tx pps ooo' : [12,  1,  True],
	  'tx bowt'    : [13, .1, False],
	  'tx jitter'  : [14, .1, False],
	  'rx bps drop': [15,  1,  True],
	  'rx pps drop': [16,  1,  True],
	  'rx pps lost': [17,  1,  True],
	  'rx pps ooo' : [18,  1,  True],
	  'rx bowt'    : [19, .1, False],
	  'rx jitter'  : [20, .1, False],
}


# generate list of valid monitors
def inventory_ctxsdwan_vpath(check, info):
    inventory = []

    for vpath in info[0]:
        inventory.append( (vpath[CTX_SDWAN_VPATH_NAME], [ vpath[CTX_SDWAN_VPATH_IDX] ]) )

    return inventory

# build performance data
def gen_ctxsdwan_vpath_perf(vpath):
	this_time = int(time.time())

	perf = [
		['state', vpath[CTX_SDWAN_VPATH_STATE]],
	]

	for name, opts in ctx_sdwan_vpath_perf.items():
		if opts[2]:
			perf.append(
				[name, get_rate("sdwan.vpath.{}.{}".format(vpath[CTX_SDWAN_VPATH_IDX], opts[0]), this_time, float(vpath[opts[0]]) * opts[1])]
        )
		else:
			perf.append(
				[name, float(vpath[opts[0]]) * opts[1]]
        )

	return perf

# eval service state
def check_ctxsdwan_vpath(item, params, info):
	for vpath in info[0]:
		if vpath[CTX_SDWAN_VPATH_IDX] == params[0]:
			if not vpath[CTX_SDWAN_VPATH_STATE] in ctx_sdwan_vpath_states:
				return (3, "VPath state '{}' is unknown".format(vpath[CTX_SDWAN_VPATH_STATE]))

			return (ctx_sdwan_vpath_states[ vpath[CTX_SDWAN_VPATH_STATE] ][0],
				    "VPath state is {}({})".format(ctx_sdwan_vpath_states[ vpath[CTX_SDWAN_VPATH_STATE] ][1], vpath[CTX_SDWAN_VPATH_STATE]),
					gen_ctxsdwan_vpath_perf(vpath))

	return (3, "index '{}' not found in SNMP table".format(params[0]))


# check registry
check_info["ctx_sdwan_vpath"] = {
	'check_function':          check_ctxsdwan_vpath,
	'inventory_function':      inventory_ctxsdwan_vpath,
	'service_description':     'SDW VPath %s',
	'snmp_info':               [
	# CITRIX-SD-WAN-MIB::sdWANStatsVPathEntry
		('.1.3.6.1.4.1.3845.31.4.2.2.16.2.1', [OID_END, '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']),
	],
	'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.3845.31.4",
	'has_perfdata':            True,
}
