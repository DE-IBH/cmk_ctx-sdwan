#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# cmk_ctx-sdwan - check-mk plugin for SNMP-based Cisco Digital-Optical-Monitoring monitoring
#
# Authors:
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2019 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

CTX_SDWAN_LINK_IDX = 0
CTX_SDWAN_LINK_NAME = 1
CTX_SDWAN_LINK_STATE = 2

ctx_sdwan_link_states = {
	"0": [0, 'undefined'],
	"1": [1, 'disabled'],
	"2": [2, 'dead'],
	"3": [1, 'bad'],
	"4": [0, 'good'],
}

ctx_sdwan_link_perf = {
	  'bps tx': 3,
	  'pps tx': 4,
	  'bps rx': 5,
	  'pps rx': 6,
	'bps drop': 7,
	'pps drop': 8,
}


# generate list of valid monitors
def inventory_ctxsdwan_link(check, info):
	inventory = []

	for link in info[0]:
		inventory.append( (link[CTX_SDWAN_LINK_NAME], [ link[CTX_SDWAN_LINK_IDX] ]) )

	return inventory

# build performance data
def gen_ctxsdwan_link_perf(link):
	this_time = int(time.time())

	perf = [
		['state', link[CTX_SDWAN_LINK_STATE]],
	]

	for name, idx in ctx_sdwan_link_perf.items():
		perf.append(
			[name, get_rate("SDWAN-Link.{}.{}".format(link[CTX_SDWAN_LINK_IDX], idx), this_time, int(link[idx]))]
		)

	return perf

# eval service state
def check_ctxsdwan_link(item, params, info):
	for link in info[0]:
		if link[CTX_SDWAN_LINK_IDX] == params[0]:
			if not link[CTX_SDWAN_LINK_STATE] in ctx_sdwan_link_states:
				return (3, "Link state '{}' is unknown".format(link[CTX_SDWAN_LINK_STATE]))

			return (ctx_sdwan_link_states[ link[CTX_SDWAN_LINK_STATE] ][0],
				"Link state is {}({})".format(ctx_sdwan_link_states[ link[CTX_SDWAN_LINK_STATE] ][1], link[CTX_SDWAN_LINK_STATE]),
				gen_ctxsdwan_link_perf(link))

	return (3, "index '{}' not found in SNMP table".format(params[0]))


# check registry
check_info["ctx_sdwan_link"] = {
	'check_function':          check_ctxsdwan_link,
	'inventory_function':      inventory_ctxsdwan_link,
	'service_description':     'SDW Link %s',
	'snmp_info':               [
	# CITRIX-SD-WAN-MIB::sdWANStatsWANLinkEntry
		('.1.3.6.1.4.1.3845.31.4.2.2.15.2.1', [OID_END, '3', '4', '5', '6', '7', '8', '9', '10']),
	],
	'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.3845.31.4",
	'has_perfdata':            True,
}
