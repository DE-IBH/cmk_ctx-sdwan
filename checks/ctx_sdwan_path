#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# cmk_ctx-sdwan - check-mk plugin for SNMP-based Cisco Digital-Optical-Monitoring monitoring
#
# Authors:
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2019 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

CTX_SDWAN_PATH_IDX = 1
CTX_SDWAN_PATH_NAME = 2
CTX_SDWAN_PATH_STATE = 3

ctx_sdwan_path_states = {
	"0": [0, 'undefined'],
	"1": [2, 'disabled'],
	"2": [2, 'dead'],
	"3": [2, 'bad'],
	"4": [0, 'good'],
}

ctx_sdwan_path_perf = {
	  'tx bps'     : [ 4,  1,  True],
	  'tx pps'     : [ 5,  1,  True],
	  'rx bps'     : [ 6,  1,  True],
	  'rx pps'     : [ 7,  1,  True],
	  'bowt'       : [ 8, .1, False],
	  'jitter'     : [ 9, .1, False],
	  'pps lost'   : [10,  1,  True],
	  'pps ooo'    : [11,  1,  True],
}


# generate list of valid monitors
def inventory_ctxsdwan_path(check, info):
    inventory = []

    for path in info[0]:
        inventory.append( (path[CTX_SDWAN_PATH_NAME], [ path[CTX_SDWAN_PATH_IDX] ]) )

    return inventory

# build performance data
def gen_ctxsdwan_path_perf(path):
	this_time = int(time.time())

	perf = [
		['state', path[CTX_SDWAN_PATH_STATE]],
	]

	for name, opts in ctx_sdwan_path_perf.items():
		if opts[2]:
			perf.append(
				[name, get_rate("sdwan.path.{}.{}".format(path[CTX_SDWAN_PATH_IDX], opts[0]), this_time, float(path[opts[0]]) * opts[1])]
        )
		else:
			perf.append(
				[name, float(path[opts[0]]) * opts[1]]
        )

	return perf

# eval service state
def check_ctxsdwan_path(item, params, info):
	for path in info[0]:
		if path[CTX_SDWAN_PATH_IDX] == params[0]:
			if not path[CTX_SDWAN_PATH_STATE] in ctx_sdwan_path_states:
				return (3, "Path state '{}' is unknown".format(path[CTX_SDWAN_PATH_STATE]))

			return (ctx_sdwan_path_states[ path[CTX_SDWAN_PATH_STATE] ][0],
				    "Path state is {}({})".format(ctx_sdwan_path_states[ path[CTX_SDWAN_PATH_STATE] ][1], path[CTX_SDWAN_PATH_STATE]),
					gen_ctxsdwan_path_perf(path))

	return (3, "index '{}' not found in SNMP table".format(params[0]))


# check registry
check_info["ctx_sdwan_path"] = {
	'check_function':          check_ctxsdwan_path,
	'inventory_function':      inventory_ctxsdwan_path,
	'service_description':     'SDW Path %s',
	'snmp_info':               [
	# CITRIX-SD-WAN-MIB::sdWANStatsWANPathEntry
		('.1.3.6.1.4.1.3845.31.4.2.2.16.3.1.1', [OID_STRING, '2', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']),
	],
	'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.3845.31.4",
	'has_perfdata':            True,
}
